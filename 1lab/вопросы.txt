Контрольные вопросы

1. Какова структура программы на языке Си?
Программа на языке Си состоит из функций, каждая из которых может содержать переменные, операторы, выражения и инструкции.

2. Зачем нужна директива #include?
Директива #include используется для включения содержимого других файлов, 
которые могут содержать объявления функций, переменных и других элементов программы.

3. Что такое main()?
main() - это главная функция программы на языке Си, которая является точкой входа в программу
и отвечает за выполнение основных операций.

4. Для чего используются идентификаторы и правило их образования?
Идентификаторы используются для именования переменных, функций, констант и других элементов программы. 
Их образование должно соответствовать определенным правилам, например, имена переменных должны начинаться с буквы
или символа подчеркивания и могут содержать только буквы, цифры и символ подчеркивания.

5. Что такое переменная? Чем характеризуется переменная?
Переменная - это область памяти, которая используется для хранения значений. Она характеризуется типом, именем и значением.

6. Как задать значение переменной и как можно изменить значение 
переменной?
Значение переменной можно задать при ее объявлении или в дальнейшем при помощи операции присваивания.
Значение переменной можно изменить, присвоив ей новое значение при помощи операции присваивания.

7. Что такое константа? Как представить в программе именованную 
константу?
Константа - это значение, которое не может быть изменено в программе. 
Именованная константа может быть представлена в программе при помощи директивы #define, например: #define PI 3.14159265359.

8. Что определяет тип данного?
Тип данных определяет множество значений, которые могут быть присвоены переменной, а также операции, которые можно 
выполнить над этими значениями.

9. Перечислите стандартные типы данных языка Си.
Стандартные типы данных языка Си включают целочисленные типы (int, short, long), вещественные типы (float, double), 
символьный тип (char) и указательный тип (void *).

10. Что такое void?
void - это ключевое слово языка Си, которое обозначает отсутствие значения, типа или параметров.

11. Что такое явное и неявное приведение типов? Как и когда оно
используется?
Явное приведение типов - это принудительное преобразование значения одного типа к другому типу. 
Неявное приведение типов - это автоматическое преобразование значения одного типа к другому типу. 
Оно используется в тех случаях, когда тип результата выражения не соответствует типу операндов.

12. Будет ли выдана ошибка, если переменной целого типа присвоить 
переменную вещественного типа?
В таком случае будет произведено неявное приведение типа, и дробная часть значения будет отброшена.

13. Как проинициализировать переменную?
Чтобы проинициализировать переменную, нужно указать её тип и присвоить ей начальное значение при объявлении.

14. Какие операции относятся к арифметическим операциям? Каков 
приоритет каждой из них?
Арифметические операции включают в себя сложение (+), вычитание (-), умножение (*), деление (/) и остаток от деления (%). 
Приоритет операций следующий: умножение и деление имеют более высокий приоритет, чем сложение и вычитание, 
но операции в рамках одного приоритета выполняются слева направо.

15. Как выполняется операция деления в случае целочисленных операндов и в случае, когда хотя бы один из операндов вещественный?
Если оба операнда являются целыми числами, то результат деления также будет целым числом (без дробной части), а любая дробная часть будет отброшена. 
Если хотя бы один операнд является вещественным числом, то результатом будет вещественное число.

16. Какой операцией можно получить остаток от деления? 
Остаток от деления можно получить с помощью операции модуля (%), которая возвращает остаток от деления первого операнда на второй.

17. Что такое выражение?
Выражение - это комбинация переменных, констант и операторов, которая может быть вычислена в значение.

18. В каком порядке выполняются присваивания в случае, если в выражении их несколько?
Если в выражении несколько операций присваивания, то они выполняются справа налево

19. Как и зачем используются расширенные операции присваивания?
Расширенные операции присваивания позволяют объединить операцию присваивания с арифметической операцией. 
Например, x += 5 означает x = x + 5.

20. В каком порядке выполняются присваивания в случае, если в выражении их несколько?
Если в выражении несколько операций присваивания, то они выполняются справа налево.

21. Чем отличается префиксная форма операции инкремента или декремента от постфиксной?
Префиксная форма операции инкремента или декремента увеличивает или уменьшает значение переменной на 1 до того, 
как это значение будет использовано в выражении. Постфиксная форма выполняет то же самое, но после того, 
как значение переменной будет использовано в выражении.

22. Какие функции используются для ввода информации? Назовите 
их отличительные особенности.
Функции scanf() и fgets() используются для ввода информации. scanf() позволяет считывать данные из стандартного ввода
(например, клавиатуры) в заданные переменные, а fgets() позволяет считывать строки из стандартного ввода.

23. Какие функции используются для вывода информации? Назовите 
их отличительные особенности
Для вывода информации в языке программирования C используется функция printf(). Её отличительной особенностью является 
возможность форматирования выводимых данных с помощью специальных символов, называемых спецификаторами формата. 
Это позволяет управлять шириной и точностью вывода чисел, форматировать строки, выводить специальные символы и т.д.

24. Почему функции scanf() и printf() называются функциями форматного ввода и вывода? Как они работают?
Функции scanf() и printf() называются функциями форматного ввода и вывода, потому что они позволяют читать и записывать данные, 
форматированные в соответствии с заданными спецификациями. Кроме того, они позволяют управлять вводом и выводом, например, 
считывать данные из файла или выводить их на экран.
25. Чем отличается форматная строка функции scanf() от форматной 
строки функции printf()?
Форматная строка функции scanf() используется для задания ожидаемого формата вводимых данных. Она содержит спецификаторы формата, 
которые определяют тип и количество вводимых значений. Форматная строка функции printf() используется для форматирования выводимых данных. 
Она содержит спецификаторы формата, которые определяют тип и формат вывода значений.

26. Что может быть использовано в качестве аргументов в функции 
scanf()? Сколько их должно быть?
В функции scanf() аргументами могут быть указатели на переменные, в которые будут записываться считываемые значения. 
Количество аргументов должно соответствовать количеству спецификаторов формата в форматной строке.

27. Что может быть использовано в качестве аргументов в функции 
printf()? Сколько их должно быть?
В функции printf() аргументами могут быть переменные, которые необходимо вывести на экран. 
Количество аргументов должно соответствовать количеству спецификаторов формата в форматной строке.

28. Каковы последствия несоответствия типа выводимого функцией 
printf() значения спецификатору типа?
Если тип значения, выводимого функцией printf(), не соответствует спецификатору формата, то могут возникнуть проблемы при выводе данных. 
Например, при попытке вывести на экран целочисленную переменную с помощью спецификатора формата для вещественных чисел может произойти искажение значения.

29. Что такое управляющие символы? Зачем они нужны? Приведите 
примеры
Управляющие символы - это специальные символы, которые используются для управления выводом на экран. Например, символ перевода строки (\n) используется для перевода курсора на новую строку, 
символ табуляции (\t) - для выравнивания текста по заданной ширине, символ забоя (\) - для вывода самого символа забоя. Пример: printf("Hello\tworld\n"); - выводит на экран строку "Hello" с табуляцией, 
затем строку "world" с переводом курсора на новую строку.